//
// Generated file, do not edit! Created by nedtool 5.1 from MQTT.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __MQTT_M_H
#define __MQTT_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0501
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
	#include "IoTPacket_m.h"
// }}

/**
 * Enum generated from <tt>MQTT.msg:6</tt> by nedtool.
 * <pre>
 * enum controlType
 * {
 * 
 *     CONNECT = 1;
 *     CONNACK = 2;
 *     PUBLISH = 3;
 *     PUBACK = 4;
 *     PUBREC = 5;
 *     PUBREL = 6;
 *     PUBCOMP = 7;
 *     SUBSCRIBE = 8;
 *     SUBACK = 9;
 *     UNSUBSCRIBE = 10;
 *     UNSUBACK = 11;
 *     PINGREQ = 12;
 *     PINGRESP = 13;
 *     DISCONNECT = 14;
 * }
 * </pre>
 */
enum controlType {
    CONNECT = 1,
    CONNACK = 2,
    PUBLISH = 3,
    PUBACK = 4,
    PUBREC = 5,
    PUBREL = 6,
    PUBCOMP = 7,
    SUBSCRIBE = 8,
    SUBACK = 9,
    UNSUBSCRIBE = 10,
    UNSUBACK = 11,
    PINGREQ = 12,
    PINGRESP = 13,
    DISCONNECT = 14
};

/**
 * Class generated from <tt>MQTT.msg:26</tt> by nedtool.
 * <pre>
 * packet MQTT extends IoTPacket
 * {
 *     int controlType \@enum(controlType);
 *     bool hasVariableHeader;
 *     bool hasPayload;
 * }
 * </pre>
 */
class MQTT : public ::IoTPacket
{
  protected:
    int controlType;
    bool hasVariableHeader;
    bool hasPayload;

  private:
    void copy(const MQTT& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const MQTT&);

  public:
    MQTT(const char *name=nullptr, short kind=0);
    MQTT(const MQTT& other);
    virtual ~MQTT();
    MQTT& operator=(const MQTT& other);
    virtual MQTT *dup() const override {return new MQTT(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getControlType() const;
    virtual void setControlType(int controlType);
    virtual bool getHasVariableHeader() const;
    virtual void setHasVariableHeader(bool hasVariableHeader);
    virtual bool getHasPayload() const;
    virtual void setHasPayload(bool hasPayload);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MQTT& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MQTT& obj) {obj.parsimUnpack(b);}


#endif // ifndef __MQTT_M_H

